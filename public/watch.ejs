<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title><%#= title %> - GenericAnimeWeb</title>
    <link rel="stylesheet" href="/css/watch.css">
    <link rel="stylesheet" href="/css/styles.css">
</head>
<body>
<header class="main-header">
    <div class="container">
        <h1 class="mh-logo">
            <a href="/"><img src="/img/logo.webp" width="170" height="95" alt="GenericAnimeWeb"></a>
        </h1>
        <nav class="main-nav">
            <ul class="main-nav-list">
                <li><label><input type="text" id="search-box" placeholder="Search"></label></li>
                <li><a href="/">Home</a></li>
                <li><a href="/trending">Trending</a></li>
                <li><a href="/genres">Genres</a></li>
            </ul>
        </nav>
    </div>
</header>
    <center>
        <!-- <iframe id="ifr" allow="fullscreen" scrolling="no" src="<%#- apiUrl %>watch/<%#- epData[0]%>/<%#- epData[1] %>" style="width: 1024px; height: 100vh; max-width: 100%; max-height: 100%; border:none;" ></iframe> -->
        <link rel="stylesheet" href="https://cdn.plyr.io/3.5.6/plyr.css">

        <video id="player" controls preload="metadata">

        </video>

        <script src='https://cdn.jsdelivr.net/hls.js/latest/hls.js'></script> 
        <script src="https://unpkg.com/plyr@3.7.2/dist/plyr.min.js"></script>
    </center>
     <section class="tv-series" id="episodes" >
        <div class="episode-container">
          <h2 class="h2 section-title">Episodes</h2>
          <ul class="episode">
            <% let showReverse = showInfo.episodes.reverse() %>
<% showReverse.forEach((ep) => { %>
			<li class="epi-me">
				<a href="/watch/<%- ep.id %>">
				<div title="<%- ep.number %>" class="name">
				<span><%- ep.number %></span>
				</div>
				</a>
			</li>	
  <% }) %>
  </ul>
        </div>
<ul>
</ul>
</section>
<style>
    .plyr--video {
        max-width: 60%;
        margin-top: 200px;
    }
    center {
        margin-top: 200px;
    }
</style>
<%
    streamSource = info.sources.find(x => x.quality === 'default')
    if (streamSource == undefined) {
        console.log("Default resolution not found! Falling back to 480p")
        streamSource = info.sources.find(x => x.quality === '480p')
    }
 %>
<script>
    // animation because stupid :D


    // HLS loading function
    const plyrConfig = {
        settings: ['quality', 'speed', 'loop'],
    }
    var video = document.querySelector('#player');
    if (Hls.isSupported()) { var hls = new Hls(); 
        hls.loadSource('<%- streamSource.url %>');
        hls.attachMedia(video); 
        hls.on(Hls.Events.MANIFEST_PARSED, function() {
            video.play(); 
        }); 
    } 
// register detailed HLS errors if debug is enabled in Plyr.
if (plyrConfig.debug == true) {
    hls.on(Hls.Events.ERROR, function (event, data) { console.log(data)
    console.log(event)});
} else {
    hls.on(Hls.Events.ERROR, function (event, data) { console.log("Video Stream Buffering...") });
}

      
 
hls.on(Hls.Events.MANIFEST_PARSED, () => {
 player = loadPlayer();
});
 function updateQuality(newQuality) {
  hls.levels.forEach((level, levelIndex) => {
      if (level.height === newQuality) {
        console.log("Found quality match with " + newQuality);
      hls.currentLevel = levelIndex;
      }
    });
  }
  



function loadPlayer() {


  // If HLS is supported, we add video quality settings

let defaultOptions = {



};

 const availableQualities = hls.levels.map((l) => l.height)

      // Add new qualities to option
      defaultOptions.quality = {
        default: availableQualities[1],
        options: availableQualities,
        // this ensures Plyr to use Hls to update quality level
        forced: true,        
        onChange: (e) => updateQuality(e),
      }

      // Initialize here
     
    
 const player = new Plyr('#player', defaultOptions); player.on('enterfullscreen', event => {  screen.orientation.lock('landscape');});player.on('exitfullscreen', event => { screen.orientation.lock('portrait');});

  // Start HLS load on play event

return player;
  
}
</script>
<script src="/js/main.js"></script>
</body>
</html>